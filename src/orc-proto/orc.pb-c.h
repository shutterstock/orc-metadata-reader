/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: orc.proto 7dfe4a7483145be109201f1dbeeffac875ccef1a */

#ifndef PROTOBUF_C_orc_2eproto__INCLUDED
#define PROTOBUF_C_orc_2eproto__INCLUDED

#include <protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Orc__Proto__IntegerStatistics Orc__Proto__IntegerStatistics;
typedef struct _Orc__Proto__DoubleStatistics Orc__Proto__DoubleStatistics;
typedef struct _Orc__Proto__StringStatistics Orc__Proto__StringStatistics;
typedef struct _Orc__Proto__BucketStatistics Orc__Proto__BucketStatistics;
typedef struct _Orc__Proto__DecimalStatistics Orc__Proto__DecimalStatistics;
typedef struct _Orc__Proto__DateStatistics Orc__Proto__DateStatistics;
typedef struct _Orc__Proto__TimestampStatistics Orc__Proto__TimestampStatistics;
typedef struct _Orc__Proto__BinaryStatistics Orc__Proto__BinaryStatistics;
typedef struct _Orc__Proto__ColumnStatistics Orc__Proto__ColumnStatistics;
typedef struct _Orc__Proto__RowIndexEntry Orc__Proto__RowIndexEntry;
typedef struct _Orc__Proto__RowIndex Orc__Proto__RowIndex;
typedef struct _Orc__Proto__BloomFilter Orc__Proto__BloomFilter;
typedef struct _Orc__Proto__BloomFilterIndex Orc__Proto__BloomFilterIndex;
typedef struct _Orc__Proto__Stream Orc__Proto__Stream;
typedef struct _Orc__Proto__ColumnEncoding Orc__Proto__ColumnEncoding;
typedef struct _Orc__Proto__StripeFooter Orc__Proto__StripeFooter;
typedef struct _Orc__Proto__Type Orc__Proto__Type;
typedef struct _Orc__Proto__StripeInformation Orc__Proto__StripeInformation;
typedef struct _Orc__Proto__UserMetadataItem Orc__Proto__UserMetadataItem;
typedef struct _Orc__Proto__StripeStatistics Orc__Proto__StripeStatistics;
typedef struct _Orc__Proto__Metadata Orc__Proto__Metadata;
typedef struct _Orc__Proto__Footer Orc__Proto__Footer;
typedef struct _Orc__Proto__PostScript Orc__Proto__PostScript;
typedef struct _Orc__Proto__FileTail Orc__Proto__FileTail;


/* --- enums --- */

/*
 * if you add new index stream kinds, you need to make sure to update
 * StreamName to ensure it is added to the stripe in the right area
 */
typedef enum _Orc__Proto__Stream__Kind {
  ORC__PROTO__STREAM__KIND__PRESENT = 0,
  ORC__PROTO__STREAM__KIND__DATA = 1,
  ORC__PROTO__STREAM__KIND__LENGTH = 2,
  ORC__PROTO__STREAM__KIND__DICTIONARY_DATA = 3,
  ORC__PROTO__STREAM__KIND__DICTIONARY_COUNT = 4,
  ORC__PROTO__STREAM__KIND__SECONDARY = 5,
  ORC__PROTO__STREAM__KIND__ROW_INDEX = 6,
  ORC__PROTO__STREAM__KIND__BLOOM_FILTER = 7,
  ORC__PROTO__STREAM__KIND__BLOOM_FILTER_UTF8 = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ORC__PROTO__STREAM__KIND)
} Orc__Proto__Stream__Kind;
typedef enum _Orc__Proto__ColumnEncoding__Kind {
  ORC__PROTO__COLUMN_ENCODING__KIND__DIRECT = 0,
  ORC__PROTO__COLUMN_ENCODING__KIND__DICTIONARY = 1,
  ORC__PROTO__COLUMN_ENCODING__KIND__DIRECT_V2 = 2,
  ORC__PROTO__COLUMN_ENCODING__KIND__DICTIONARY_V2 = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ORC__PROTO__COLUMN_ENCODING__KIND)
} Orc__Proto__ColumnEncoding__Kind;
typedef enum _Orc__Proto__Type__Kind {
  ORC__PROTO__TYPE__KIND__BOOLEAN = 0,
  ORC__PROTO__TYPE__KIND__BYTE = 1,
  ORC__PROTO__TYPE__KIND__SHORT = 2,
  ORC__PROTO__TYPE__KIND__INT = 3,
  ORC__PROTO__TYPE__KIND__LONG = 4,
  ORC__PROTO__TYPE__KIND__FLOAT = 5,
  ORC__PROTO__TYPE__KIND__DOUBLE = 6,
  ORC__PROTO__TYPE__KIND__STRING = 7,
  ORC__PROTO__TYPE__KIND__BINARY = 8,
  ORC__PROTO__TYPE__KIND__TIMESTAMP = 9,
  ORC__PROTO__TYPE__KIND__LIST = 10,
  ORC__PROTO__TYPE__KIND__MAP = 11,
  ORC__PROTO__TYPE__KIND__STRUCT = 12,
  ORC__PROTO__TYPE__KIND__UNION = 13,
  ORC__PROTO__TYPE__KIND__DECIMAL = 14,
  ORC__PROTO__TYPE__KIND__DATE = 15,
  ORC__PROTO__TYPE__KIND__VARCHAR = 16,
  ORC__PROTO__TYPE__KIND__CHAR = 17
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ORC__PROTO__TYPE__KIND)
} Orc__Proto__Type__Kind;
typedef enum _Orc__Proto__CompressionKind {
  ORC__PROTO__COMPRESSION_KIND__NONE = 0,
  ORC__PROTO__COMPRESSION_KIND__ZLIB = 1,
  ORC__PROTO__COMPRESSION_KIND__SNAPPY = 2,
  ORC__PROTO__COMPRESSION_KIND__LZO = 3,
  ORC__PROTO__COMPRESSION_KIND__LZ4 = 4,
  ORC__PROTO__COMPRESSION_KIND__ZSTD = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ORC__PROTO__COMPRESSION_KIND)
} Orc__Proto__CompressionKind;

/* --- messages --- */

struct  _Orc__Proto__IntegerStatistics
{
  ProtobufCMessage base;
  protobuf_c_boolean has_minimum;
  int64_t minimum;
  protobuf_c_boolean has_maximum;
  int64_t maximum;
  protobuf_c_boolean has_sum;
  int64_t sum;
};
#define ORC__PROTO__INTEGER_STATISTICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__integer_statistics__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _Orc__Proto__DoubleStatistics
{
  ProtobufCMessage base;
  protobuf_c_boolean has_minimum;
  double minimum;
  protobuf_c_boolean has_maximum;
  double maximum;
  protobuf_c_boolean has_sum;
  double sum;
};
#define ORC__PROTO__DOUBLE_STATISTICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__double_statistics__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _Orc__Proto__StringStatistics
{
  ProtobufCMessage base;
  char *minimum;
  char *maximum;
  /*
   * sum will store the total length of all strings in a stripe
   */
  protobuf_c_boolean has_sum;
  int64_t sum;
};
#define ORC__PROTO__STRING_STATISTICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__string_statistics__descriptor) \
    , NULL, NULL, 0, 0 }


struct  _Orc__Proto__BucketStatistics
{
  ProtobufCMessage base;
  size_t n_count;
  uint64_t *count;
};
#define ORC__PROTO__BUCKET_STATISTICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__bucket_statistics__descriptor) \
    , 0,NULL }


struct  _Orc__Proto__DecimalStatistics
{
  ProtobufCMessage base;
  char *minimum;
  char *maximum;
  char *sum;
};
#define ORC__PROTO__DECIMAL_STATISTICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__decimal_statistics__descriptor) \
    , NULL, NULL, NULL }


struct  _Orc__Proto__DateStatistics
{
  ProtobufCMessage base;
  /*
   * min,max values saved as days since epoch
   */
  protobuf_c_boolean has_minimum;
  int32_t minimum;
  protobuf_c_boolean has_maximum;
  int32_t maximum;
};
#define ORC__PROTO__DATE_STATISTICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__date_statistics__descriptor) \
    , 0, 0, 0, 0 }


struct  _Orc__Proto__TimestampStatistics
{
  ProtobufCMessage base;
  /*
   * min,max values saved as milliseconds since epoch
   */
  protobuf_c_boolean has_minimum;
  int64_t minimum;
  protobuf_c_boolean has_maximum;
  int64_t maximum;
  protobuf_c_boolean has_minimumutc;
  int64_t minimumutc;
  protobuf_c_boolean has_maximumutc;
  int64_t maximumutc;
};
#define ORC__PROTO__TIMESTAMP_STATISTICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__timestamp_statistics__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Orc__Proto__BinaryStatistics
{
  ProtobufCMessage base;
  /*
   * sum will store the total binary blob length in a stripe
   */
  protobuf_c_boolean has_sum;
  int64_t sum;
};
#define ORC__PROTO__BINARY_STATISTICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__binary_statistics__descriptor) \
    , 0, 0 }


struct  _Orc__Proto__ColumnStatistics
{
  ProtobufCMessage base;
  protobuf_c_boolean has_numberofvalues;
  uint64_t numberofvalues;
  Orc__Proto__IntegerStatistics *intstatistics;
  Orc__Proto__DoubleStatistics *doublestatistics;
  Orc__Proto__StringStatistics *stringstatistics;
  Orc__Proto__BucketStatistics *bucketstatistics;
  Orc__Proto__DecimalStatistics *decimalstatistics;
  Orc__Proto__DateStatistics *datestatistics;
  Orc__Proto__BinaryStatistics *binarystatistics;
  Orc__Proto__TimestampStatistics *timestampstatistics;
  protobuf_c_boolean has_hasnull;
  protobuf_c_boolean hasnull;
};
#define ORC__PROTO__COLUMN_STATISTICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__column_statistics__descriptor) \
    , 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0 }


struct  _Orc__Proto__RowIndexEntry
{
  ProtobufCMessage base;
  size_t n_positions;
  uint64_t *positions;
  Orc__Proto__ColumnStatistics *statistics;
};
#define ORC__PROTO__ROW_INDEX_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__row_index_entry__descriptor) \
    , 0,NULL, NULL }


struct  _Orc__Proto__RowIndex
{
  ProtobufCMessage base;
  size_t n_entry;
  Orc__Proto__RowIndexEntry **entry;
};
#define ORC__PROTO__ROW_INDEX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__row_index__descriptor) \
    , 0,NULL }


struct  _Orc__Proto__BloomFilter
{
  ProtobufCMessage base;
  protobuf_c_boolean has_numhashfunctions;
  uint32_t numhashfunctions;
  size_t n_bitset;
  uint64_t *bitset;
  protobuf_c_boolean has_utf8bitset;
  ProtobufCBinaryData utf8bitset;
};
#define ORC__PROTO__BLOOM_FILTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__bloom_filter__descriptor) \
    , 0, 0, 0,NULL, 0, {0,NULL} }


struct  _Orc__Proto__BloomFilterIndex
{
  ProtobufCMessage base;
  size_t n_bloomfilter;
  Orc__Proto__BloomFilter **bloomfilter;
};
#define ORC__PROTO__BLOOM_FILTER_INDEX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__bloom_filter_index__descriptor) \
    , 0,NULL }


struct  _Orc__Proto__Stream
{
  ProtobufCMessage base;
  protobuf_c_boolean has_kind;
  Orc__Proto__Stream__Kind kind;
  protobuf_c_boolean has_column;
  uint32_t column;
  protobuf_c_boolean has_length;
  uint64_t length;
};
#define ORC__PROTO__STREAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__stream__descriptor) \
    , 0, ORC__PROTO__STREAM__KIND__PRESENT, 0, 0, 0, 0 }


struct  _Orc__Proto__ColumnEncoding
{
  ProtobufCMessage base;
  protobuf_c_boolean has_kind;
  Orc__Proto__ColumnEncoding__Kind kind;
  protobuf_c_boolean has_dictionarysize;
  uint32_t dictionarysize;
  /*
   * The encoding of the bloom filters for this column:
   *   0 or missing = none or original
   *   1            = ORC-135 (utc for timestamps)
   */
  protobuf_c_boolean has_bloomencoding;
  uint32_t bloomencoding;
};
#define ORC__PROTO__COLUMN_ENCODING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__column_encoding__descriptor) \
    , 0, ORC__PROTO__COLUMN_ENCODING__KIND__DIRECT, 0, 0, 0, 0 }


struct  _Orc__Proto__StripeFooter
{
  ProtobufCMessage base;
  size_t n_streams;
  Orc__Proto__Stream **streams;
  size_t n_columns;
  Orc__Proto__ColumnEncoding **columns;
  char *writertimezone;
};
#define ORC__PROTO__STRIPE_FOOTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__stripe_footer__descriptor) \
    , 0,NULL, 0,NULL, NULL }


struct  _Orc__Proto__Type
{
  ProtobufCMessage base;
  protobuf_c_boolean has_kind;
  Orc__Proto__Type__Kind kind;
  size_t n_subtypes;
  uint32_t *subtypes;
  size_t n_fieldnames;
  char **fieldnames;
  protobuf_c_boolean has_maximumlength;
  uint32_t maximumlength;
  protobuf_c_boolean has_precision;
  uint32_t precision;
  protobuf_c_boolean has_scale;
  uint32_t scale;
};
#define ORC__PROTO__TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__type__descriptor) \
    , 0, ORC__PROTO__TYPE__KIND__BOOLEAN, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0 }


struct  _Orc__Proto__StripeInformation
{
  ProtobufCMessage base;
  protobuf_c_boolean has_offset;
  uint64_t offset;
  protobuf_c_boolean has_indexlength;
  uint64_t indexlength;
  protobuf_c_boolean has_datalength;
  uint64_t datalength;
  protobuf_c_boolean has_footerlength;
  uint64_t footerlength;
  protobuf_c_boolean has_numberofrows;
  uint64_t numberofrows;
};
#define ORC__PROTO__STRIPE_INFORMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__stripe_information__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Orc__Proto__UserMetadataItem
{
  ProtobufCMessage base;
  char *name;
  protobuf_c_boolean has_value;
  ProtobufCBinaryData value;
};
#define ORC__PROTO__USER_METADATA_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__user_metadata_item__descriptor) \
    , NULL, 0, {0,NULL} }


struct  _Orc__Proto__StripeStatistics
{
  ProtobufCMessage base;
  size_t n_colstats;
  Orc__Proto__ColumnStatistics **colstats;
};
#define ORC__PROTO__STRIPE_STATISTICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__stripe_statistics__descriptor) \
    , 0,NULL }


struct  _Orc__Proto__Metadata
{
  ProtobufCMessage base;
  size_t n_stripestats;
  Orc__Proto__StripeStatistics **stripestats;
};
#define ORC__PROTO__METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__metadata__descriptor) \
    , 0,NULL }


struct  _Orc__Proto__Footer
{
  ProtobufCMessage base;
  protobuf_c_boolean has_headerlength;
  uint64_t headerlength;
  protobuf_c_boolean has_contentlength;
  uint64_t contentlength;
  size_t n_stripes;
  Orc__Proto__StripeInformation **stripes;
  size_t n_types;
  Orc__Proto__Type **types;
  size_t n_metadata;
  Orc__Proto__UserMetadataItem **metadata;
  protobuf_c_boolean has_numberofrows;
  uint64_t numberofrows;
  size_t n_statistics;
  Orc__Proto__ColumnStatistics **statistics;
  protobuf_c_boolean has_rowindexstride;
  uint32_t rowindexstride;
  /*
   * Each implementation that writes ORC files should register for a code
   * 0 = ORC Java
   * 1 = ORC C++
   * 2 = Presto
   * 3 = Scritchley Go from https://github.com/scritchley/orc
   */
  protobuf_c_boolean has_writer;
  uint32_t writer;
};
#define ORC__PROTO__FOOTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__footer__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0, 0, 0,NULL, 0, 0, 0, 0 }


/*
 * Serialized length must be less that 255 bytes
 */
struct  _Orc__Proto__PostScript
{
  ProtobufCMessage base;
  protobuf_c_boolean has_footerlength;
  uint64_t footerlength;
  protobuf_c_boolean has_compression;
  Orc__Proto__CompressionKind compression;
  protobuf_c_boolean has_compressionblocksize;
  uint64_t compressionblocksize;
  /*
   * the version of the file format
   *   [0, 11] = Hive 0.11
   *   [0, 12] = Hive 0.12
   */
  size_t n_version;
  uint32_t *version;
  protobuf_c_boolean has_metadatalength;
  uint64_t metadatalength;
  /*
   * The version of the writer that wrote the file. This number is
   * updated when we make fixes or large changes to the writer so that
   * readers can detect whether a given bug is present in the data.
   * Only the Java ORC writer may use values under 6 (or missing) so that
   * readers that predate ORC-202 treat the new writers correctly. Each
   * writer should assign their own sequence of versions starting from 6.
   * Version of the ORC Java writer:
   *   0 = original
   *   1 = HIVE-8732 fixed (fixed stripe/file maximum statistics &
   *                        string statistics use utf8 for min/max)
   *   2 = HIVE-4243 fixed (use real column names from Hive tables)
   *   3 = HIVE-12055 fixed (vectorized writer implementation)
   *   4 = HIVE-13083 fixed (decimals write present stream correctly)
   *   5 = ORC-101 fixed (bloom filters use utf8 consistently)
   *   6 = ORC-135 fixed (timestamp statistics use utc)
   * Version of the ORC C++ writer:
   *   6 = original
   * Version of the Presto writer:
   *   6 = original
   * Version of the Scritchley Go writer:
   *   6 = original
   */
  protobuf_c_boolean has_writerversion;
  uint32_t writerversion;
  /*
   * Leave this last in the record
   */
  char *magic;
};
#define ORC__PROTO__POST_SCRIPT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__post_script__descriptor) \
    , 0, 0, 0, ORC__PROTO__COMPRESSION_KIND__NONE, 0, 0, 0,NULL, 0, 0, 0, 0, NULL }


/*
 * The contents of the file tail that must be serialized.
 * This gets serialized as part of OrcSplit, also used by footer cache.
 */
struct  _Orc__Proto__FileTail
{
  ProtobufCMessage base;
  Orc__Proto__PostScript *postscript;
  Orc__Proto__Footer *footer;
  protobuf_c_boolean has_filelength;
  uint64_t filelength;
  protobuf_c_boolean has_postscriptlength;
  uint64_t postscriptlength;
};
#define ORC__PROTO__FILE_TAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&orc__proto__file_tail__descriptor) \
    , NULL, NULL, 0, 0, 0, 0 }


/* Orc__Proto__IntegerStatistics methods */
void   orc__proto__integer_statistics__init
                     (Orc__Proto__IntegerStatistics         *message);
size_t orc__proto__integer_statistics__get_packed_size
                     (const Orc__Proto__IntegerStatistics   *message);
size_t orc__proto__integer_statistics__pack
                     (const Orc__Proto__IntegerStatistics   *message,
                      uint8_t             *out);
size_t orc__proto__integer_statistics__pack_to_buffer
                     (const Orc__Proto__IntegerStatistics   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__IntegerStatistics *
       orc__proto__integer_statistics__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__integer_statistics__free_unpacked
                     (Orc__Proto__IntegerStatistics *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__DoubleStatistics methods */
void   orc__proto__double_statistics__init
                     (Orc__Proto__DoubleStatistics         *message);
size_t orc__proto__double_statistics__get_packed_size
                     (const Orc__Proto__DoubleStatistics   *message);
size_t orc__proto__double_statistics__pack
                     (const Orc__Proto__DoubleStatistics   *message,
                      uint8_t             *out);
size_t orc__proto__double_statistics__pack_to_buffer
                     (const Orc__Proto__DoubleStatistics   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__DoubleStatistics *
       orc__proto__double_statistics__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__double_statistics__free_unpacked
                     (Orc__Proto__DoubleStatistics *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__StringStatistics methods */
void   orc__proto__string_statistics__init
                     (Orc__Proto__StringStatistics         *message);
size_t orc__proto__string_statistics__get_packed_size
                     (const Orc__Proto__StringStatistics   *message);
size_t orc__proto__string_statistics__pack
                     (const Orc__Proto__StringStatistics   *message,
                      uint8_t             *out);
size_t orc__proto__string_statistics__pack_to_buffer
                     (const Orc__Proto__StringStatistics   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__StringStatistics *
       orc__proto__string_statistics__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__string_statistics__free_unpacked
                     (Orc__Proto__StringStatistics *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__BucketStatistics methods */
void   orc__proto__bucket_statistics__init
                     (Orc__Proto__BucketStatistics         *message);
size_t orc__proto__bucket_statistics__get_packed_size
                     (const Orc__Proto__BucketStatistics   *message);
size_t orc__proto__bucket_statistics__pack
                     (const Orc__Proto__BucketStatistics   *message,
                      uint8_t             *out);
size_t orc__proto__bucket_statistics__pack_to_buffer
                     (const Orc__Proto__BucketStatistics   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__BucketStatistics *
       orc__proto__bucket_statistics__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__bucket_statistics__free_unpacked
                     (Orc__Proto__BucketStatistics *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__DecimalStatistics methods */
void   orc__proto__decimal_statistics__init
                     (Orc__Proto__DecimalStatistics         *message);
size_t orc__proto__decimal_statistics__get_packed_size
                     (const Orc__Proto__DecimalStatistics   *message);
size_t orc__proto__decimal_statistics__pack
                     (const Orc__Proto__DecimalStatistics   *message,
                      uint8_t             *out);
size_t orc__proto__decimal_statistics__pack_to_buffer
                     (const Orc__Proto__DecimalStatistics   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__DecimalStatistics *
       orc__proto__decimal_statistics__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__decimal_statistics__free_unpacked
                     (Orc__Proto__DecimalStatistics *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__DateStatistics methods */
void   orc__proto__date_statistics__init
                     (Orc__Proto__DateStatistics         *message);
size_t orc__proto__date_statistics__get_packed_size
                     (const Orc__Proto__DateStatistics   *message);
size_t orc__proto__date_statistics__pack
                     (const Orc__Proto__DateStatistics   *message,
                      uint8_t             *out);
size_t orc__proto__date_statistics__pack_to_buffer
                     (const Orc__Proto__DateStatistics   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__DateStatistics *
       orc__proto__date_statistics__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__date_statistics__free_unpacked
                     (Orc__Proto__DateStatistics *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__TimestampStatistics methods */
void   orc__proto__timestamp_statistics__init
                     (Orc__Proto__TimestampStatistics         *message);
size_t orc__proto__timestamp_statistics__get_packed_size
                     (const Orc__Proto__TimestampStatistics   *message);
size_t orc__proto__timestamp_statistics__pack
                     (const Orc__Proto__TimestampStatistics   *message,
                      uint8_t             *out);
size_t orc__proto__timestamp_statistics__pack_to_buffer
                     (const Orc__Proto__TimestampStatistics   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__TimestampStatistics *
       orc__proto__timestamp_statistics__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__timestamp_statistics__free_unpacked
                     (Orc__Proto__TimestampStatistics *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__BinaryStatistics methods */
void   orc__proto__binary_statistics__init
                     (Orc__Proto__BinaryStatistics         *message);
size_t orc__proto__binary_statistics__get_packed_size
                     (const Orc__Proto__BinaryStatistics   *message);
size_t orc__proto__binary_statistics__pack
                     (const Orc__Proto__BinaryStatistics   *message,
                      uint8_t             *out);
size_t orc__proto__binary_statistics__pack_to_buffer
                     (const Orc__Proto__BinaryStatistics   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__BinaryStatistics *
       orc__proto__binary_statistics__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__binary_statistics__free_unpacked
                     (Orc__Proto__BinaryStatistics *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__ColumnStatistics methods */
void   orc__proto__column_statistics__init
                     (Orc__Proto__ColumnStatistics         *message);
size_t orc__proto__column_statistics__get_packed_size
                     (const Orc__Proto__ColumnStatistics   *message);
size_t orc__proto__column_statistics__pack
                     (const Orc__Proto__ColumnStatistics   *message,
                      uint8_t             *out);
size_t orc__proto__column_statistics__pack_to_buffer
                     (const Orc__Proto__ColumnStatistics   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__ColumnStatistics *
       orc__proto__column_statistics__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__column_statistics__free_unpacked
                     (Orc__Proto__ColumnStatistics *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__RowIndexEntry methods */
void   orc__proto__row_index_entry__init
                     (Orc__Proto__RowIndexEntry         *message);
size_t orc__proto__row_index_entry__get_packed_size
                     (const Orc__Proto__RowIndexEntry   *message);
size_t orc__proto__row_index_entry__pack
                     (const Orc__Proto__RowIndexEntry   *message,
                      uint8_t             *out);
size_t orc__proto__row_index_entry__pack_to_buffer
                     (const Orc__Proto__RowIndexEntry   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__RowIndexEntry *
       orc__proto__row_index_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__row_index_entry__free_unpacked
                     (Orc__Proto__RowIndexEntry *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__RowIndex methods */
void   orc__proto__row_index__init
                     (Orc__Proto__RowIndex         *message);
size_t orc__proto__row_index__get_packed_size
                     (const Orc__Proto__RowIndex   *message);
size_t orc__proto__row_index__pack
                     (const Orc__Proto__RowIndex   *message,
                      uint8_t             *out);
size_t orc__proto__row_index__pack_to_buffer
                     (const Orc__Proto__RowIndex   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__RowIndex *
       orc__proto__row_index__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__row_index__free_unpacked
                     (Orc__Proto__RowIndex *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__BloomFilter methods */
void   orc__proto__bloom_filter__init
                     (Orc__Proto__BloomFilter         *message);
size_t orc__proto__bloom_filter__get_packed_size
                     (const Orc__Proto__BloomFilter   *message);
size_t orc__proto__bloom_filter__pack
                     (const Orc__Proto__BloomFilter   *message,
                      uint8_t             *out);
size_t orc__proto__bloom_filter__pack_to_buffer
                     (const Orc__Proto__BloomFilter   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__BloomFilter *
       orc__proto__bloom_filter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__bloom_filter__free_unpacked
                     (Orc__Proto__BloomFilter *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__BloomFilterIndex methods */
void   orc__proto__bloom_filter_index__init
                     (Orc__Proto__BloomFilterIndex         *message);
size_t orc__proto__bloom_filter_index__get_packed_size
                     (const Orc__Proto__BloomFilterIndex   *message);
size_t orc__proto__bloom_filter_index__pack
                     (const Orc__Proto__BloomFilterIndex   *message,
                      uint8_t             *out);
size_t orc__proto__bloom_filter_index__pack_to_buffer
                     (const Orc__Proto__BloomFilterIndex   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__BloomFilterIndex *
       orc__proto__bloom_filter_index__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__bloom_filter_index__free_unpacked
                     (Orc__Proto__BloomFilterIndex *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__Stream methods */
void   orc__proto__stream__init
                     (Orc__Proto__Stream         *message);
size_t orc__proto__stream__get_packed_size
                     (const Orc__Proto__Stream   *message);
size_t orc__proto__stream__pack
                     (const Orc__Proto__Stream   *message,
                      uint8_t             *out);
size_t orc__proto__stream__pack_to_buffer
                     (const Orc__Proto__Stream   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__Stream *
       orc__proto__stream__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__stream__free_unpacked
                     (Orc__Proto__Stream *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__ColumnEncoding methods */
void   orc__proto__column_encoding__init
                     (Orc__Proto__ColumnEncoding         *message);
size_t orc__proto__column_encoding__get_packed_size
                     (const Orc__Proto__ColumnEncoding   *message);
size_t orc__proto__column_encoding__pack
                     (const Orc__Proto__ColumnEncoding   *message,
                      uint8_t             *out);
size_t orc__proto__column_encoding__pack_to_buffer
                     (const Orc__Proto__ColumnEncoding   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__ColumnEncoding *
       orc__proto__column_encoding__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__column_encoding__free_unpacked
                     (Orc__Proto__ColumnEncoding *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__StripeFooter methods */
void   orc__proto__stripe_footer__init
                     (Orc__Proto__StripeFooter         *message);
size_t orc__proto__stripe_footer__get_packed_size
                     (const Orc__Proto__StripeFooter   *message);
size_t orc__proto__stripe_footer__pack
                     (const Orc__Proto__StripeFooter   *message,
                      uint8_t             *out);
size_t orc__proto__stripe_footer__pack_to_buffer
                     (const Orc__Proto__StripeFooter   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__StripeFooter *
       orc__proto__stripe_footer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__stripe_footer__free_unpacked
                     (Orc__Proto__StripeFooter *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__Type methods */
void   orc__proto__type__init
                     (Orc__Proto__Type         *message);
size_t orc__proto__type__get_packed_size
                     (const Orc__Proto__Type   *message);
size_t orc__proto__type__pack
                     (const Orc__Proto__Type   *message,
                      uint8_t             *out);
size_t orc__proto__type__pack_to_buffer
                     (const Orc__Proto__Type   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__Type *
       orc__proto__type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__type__free_unpacked
                     (Orc__Proto__Type *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__StripeInformation methods */
void   orc__proto__stripe_information__init
                     (Orc__Proto__StripeInformation         *message);
size_t orc__proto__stripe_information__get_packed_size
                     (const Orc__Proto__StripeInformation   *message);
size_t orc__proto__stripe_information__pack
                     (const Orc__Proto__StripeInformation   *message,
                      uint8_t             *out);
size_t orc__proto__stripe_information__pack_to_buffer
                     (const Orc__Proto__StripeInformation   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__StripeInformation *
       orc__proto__stripe_information__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__stripe_information__free_unpacked
                     (Orc__Proto__StripeInformation *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__UserMetadataItem methods */
void   orc__proto__user_metadata_item__init
                     (Orc__Proto__UserMetadataItem         *message);
size_t orc__proto__user_metadata_item__get_packed_size
                     (const Orc__Proto__UserMetadataItem   *message);
size_t orc__proto__user_metadata_item__pack
                     (const Orc__Proto__UserMetadataItem   *message,
                      uint8_t             *out);
size_t orc__proto__user_metadata_item__pack_to_buffer
                     (const Orc__Proto__UserMetadataItem   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__UserMetadataItem *
       orc__proto__user_metadata_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__user_metadata_item__free_unpacked
                     (Orc__Proto__UserMetadataItem *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__StripeStatistics methods */
void   orc__proto__stripe_statistics__init
                     (Orc__Proto__StripeStatistics         *message);
size_t orc__proto__stripe_statistics__get_packed_size
                     (const Orc__Proto__StripeStatistics   *message);
size_t orc__proto__stripe_statistics__pack
                     (const Orc__Proto__StripeStatistics   *message,
                      uint8_t             *out);
size_t orc__proto__stripe_statistics__pack_to_buffer
                     (const Orc__Proto__StripeStatistics   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__StripeStatistics *
       orc__proto__stripe_statistics__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__stripe_statistics__free_unpacked
                     (Orc__Proto__StripeStatistics *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__Metadata methods */
void   orc__proto__metadata__init
                     (Orc__Proto__Metadata         *message);
size_t orc__proto__metadata__get_packed_size
                     (const Orc__Proto__Metadata   *message);
size_t orc__proto__metadata__pack
                     (const Orc__Proto__Metadata   *message,
                      uint8_t             *out);
size_t orc__proto__metadata__pack_to_buffer
                     (const Orc__Proto__Metadata   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__Metadata *
       orc__proto__metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__metadata__free_unpacked
                     (Orc__Proto__Metadata *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__Footer methods */
void   orc__proto__footer__init
                     (Orc__Proto__Footer         *message);
size_t orc__proto__footer__get_packed_size
                     (const Orc__Proto__Footer   *message);
size_t orc__proto__footer__pack
                     (const Orc__Proto__Footer   *message,
                      uint8_t             *out);
size_t orc__proto__footer__pack_to_buffer
                     (const Orc__Proto__Footer   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__Footer *
       orc__proto__footer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__footer__free_unpacked
                     (Orc__Proto__Footer *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__PostScript methods */
void   orc__proto__post_script__init
                     (Orc__Proto__PostScript         *message);
size_t orc__proto__post_script__get_packed_size
                     (const Orc__Proto__PostScript   *message);
size_t orc__proto__post_script__pack
                     (const Orc__Proto__PostScript   *message,
                      uint8_t             *out);
size_t orc__proto__post_script__pack_to_buffer
                     (const Orc__Proto__PostScript   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__PostScript *
       orc__proto__post_script__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__post_script__free_unpacked
                     (Orc__Proto__PostScript *message,
                      ProtobufCAllocator *allocator);
/* Orc__Proto__FileTail methods */
void   orc__proto__file_tail__init
                     (Orc__Proto__FileTail         *message);
size_t orc__proto__file_tail__get_packed_size
                     (const Orc__Proto__FileTail   *message);
size_t orc__proto__file_tail__pack
                     (const Orc__Proto__FileTail   *message,
                      uint8_t             *out);
size_t orc__proto__file_tail__pack_to_buffer
                     (const Orc__Proto__FileTail   *message,
                      ProtobufCBuffer     *buffer);
Orc__Proto__FileTail *
       orc__proto__file_tail__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   orc__proto__file_tail__free_unpacked
                     (Orc__Proto__FileTail *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Orc__Proto__IntegerStatistics_Closure)
                 (const Orc__Proto__IntegerStatistics *message,
                  void *closure_data);
typedef void (*Orc__Proto__DoubleStatistics_Closure)
                 (const Orc__Proto__DoubleStatistics *message,
                  void *closure_data);
typedef void (*Orc__Proto__StringStatistics_Closure)
                 (const Orc__Proto__StringStatistics *message,
                  void *closure_data);
typedef void (*Orc__Proto__BucketStatistics_Closure)
                 (const Orc__Proto__BucketStatistics *message,
                  void *closure_data);
typedef void (*Orc__Proto__DecimalStatistics_Closure)
                 (const Orc__Proto__DecimalStatistics *message,
                  void *closure_data);
typedef void (*Orc__Proto__DateStatistics_Closure)
                 (const Orc__Proto__DateStatistics *message,
                  void *closure_data);
typedef void (*Orc__Proto__TimestampStatistics_Closure)
                 (const Orc__Proto__TimestampStatistics *message,
                  void *closure_data);
typedef void (*Orc__Proto__BinaryStatistics_Closure)
                 (const Orc__Proto__BinaryStatistics *message,
                  void *closure_data);
typedef void (*Orc__Proto__ColumnStatistics_Closure)
                 (const Orc__Proto__ColumnStatistics *message,
                  void *closure_data);
typedef void (*Orc__Proto__RowIndexEntry_Closure)
                 (const Orc__Proto__RowIndexEntry *message,
                  void *closure_data);
typedef void (*Orc__Proto__RowIndex_Closure)
                 (const Orc__Proto__RowIndex *message,
                  void *closure_data);
typedef void (*Orc__Proto__BloomFilter_Closure)
                 (const Orc__Proto__BloomFilter *message,
                  void *closure_data);
typedef void (*Orc__Proto__BloomFilterIndex_Closure)
                 (const Orc__Proto__BloomFilterIndex *message,
                  void *closure_data);
typedef void (*Orc__Proto__Stream_Closure)
                 (const Orc__Proto__Stream *message,
                  void *closure_data);
typedef void (*Orc__Proto__ColumnEncoding_Closure)
                 (const Orc__Proto__ColumnEncoding *message,
                  void *closure_data);
typedef void (*Orc__Proto__StripeFooter_Closure)
                 (const Orc__Proto__StripeFooter *message,
                  void *closure_data);
typedef void (*Orc__Proto__Type_Closure)
                 (const Orc__Proto__Type *message,
                  void *closure_data);
typedef void (*Orc__Proto__StripeInformation_Closure)
                 (const Orc__Proto__StripeInformation *message,
                  void *closure_data);
typedef void (*Orc__Proto__UserMetadataItem_Closure)
                 (const Orc__Proto__UserMetadataItem *message,
                  void *closure_data);
typedef void (*Orc__Proto__StripeStatistics_Closure)
                 (const Orc__Proto__StripeStatistics *message,
                  void *closure_data);
typedef void (*Orc__Proto__Metadata_Closure)
                 (const Orc__Proto__Metadata *message,
                  void *closure_data);
typedef void (*Orc__Proto__Footer_Closure)
                 (const Orc__Proto__Footer *message,
                  void *closure_data);
typedef void (*Orc__Proto__PostScript_Closure)
                 (const Orc__Proto__PostScript *message,
                  void *closure_data);
typedef void (*Orc__Proto__FileTail_Closure)
                 (const Orc__Proto__FileTail *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    orc__proto__compression_kind__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__integer_statistics__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__double_statistics__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__string_statistics__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__bucket_statistics__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__decimal_statistics__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__date_statistics__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__timestamp_statistics__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__binary_statistics__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__column_statistics__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__row_index_entry__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__row_index__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__bloom_filter__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__bloom_filter_index__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__stream__descriptor;
extern const ProtobufCEnumDescriptor    orc__proto__stream__kind__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__column_encoding__descriptor;
extern const ProtobufCEnumDescriptor    orc__proto__column_encoding__kind__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__stripe_footer__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__type__descriptor;
extern const ProtobufCEnumDescriptor    orc__proto__type__kind__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__stripe_information__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__user_metadata_item__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__stripe_statistics__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__metadata__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__footer__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__post_script__descriptor;
extern const ProtobufCMessageDescriptor orc__proto__file_tail__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_orc_2eproto__INCLUDED */
